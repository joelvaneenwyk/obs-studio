# lsp
# https://taskfile.dev

version: "3"

set: [pipefail]
shopt: [globstar]

dotenv:
  - .env.development

vars:
  TARGET: '{{ .TARGET | default "" }}'
  GIT_PREFIX: '{{ .GIT_PREFIX | default "" }}'

  BUILD_DIR: '{{ .TASKFILE_DIR }}/.build'
  TEMP_DIR: '{{ joinPath .BUILD_DIR "tmp" }}'

  RUN: '{{ if eq OS "windows" }}cmd.exe /d /e:on /c{{ else }}sh -c{{ end }}'

  RMDIR_CMD: rmdir /s /q
  RMDIR_SH: rm -rf
  RMDIR: '{{ if eq OS "windows" }}{{.RMDIR_CMD}}{{ else }}{{.RMDIR_SH}}{{ end }}'

  MKDIR_CMD: mkdir
  MKDIR_SH: mkdir -p
  MKDIR: '{{ if eq OS "windows" }}{{.MKDIR_CMD}}{{ else }}{{.MKDIR_SH}}{{ end }}'

  CMAKE_PRESET: '{{ if eq OS "windows" }}windows-x64{{ else }}default{{ end }}'
  CMAKE_LOG_LEVEL_DEBUG: --trace
  CMAKE_SET_LOG_LEVEL: '{{ if .VERBOSE }}{{.CMAKE_LOG_LEVEL_DEBUG}}{{else}}{{end}}'

tasks:
  default:
    cmds:
      - task: cmake-build

  info:
    vars:
      CAT: '{{ if eq OS "windows" }}type{{ else }}cat{{ end }}'
      BUILDSPEC: '{{ joinPath .ROOT_DIR "buildspec.json" }}'
      BUILDSPEC_JSON_DATA:
        sh: |
          {{.CAT}} "{{ .BUILDSPEC }}"
      BUILDSPEC_JSON:
        ref: "fromJson .BUILDSPEC_JSON_DATA"
      DEPENDENCIES:
        ref: ".BUILDSPEC_JSON.dependencies"
    cmds:
      - cmd: |
          echo "Path: {{.BUILDSPEC}}"
          echo "Dependencies: {{ fromJson .BUILDSPEC_JSON.prebuilt}}"

  vcpkg-install:
    vars:
      VCPKG_ROOT: '{{ joinPath .ROOT_DIR "build-aux" "vcpkg" }}'
      VCPKG_EXE: '{{ joinPath .VCPKG_ROOT "vcpkg.exe" }}'
      VCPKG_ARGS: '{{ joinPath .VCPKG_ROOT "vcpkg.exe" }}'
      VCPKG_BOOTSTRAP: '{{ joinPath .VCPKG_ROOT "bootstrap-vcpkg.bat" }}'
      VCPKG_DEFAULT_ARGS: >-
        --vcpkg-root "{{ fromSlash .VCPKG_ROOT }}"
        --no-print-usage
        --keep-going
      RUN: '{{ if eq OS "windows" }}cmd.exe /d /e:on /c{{ else }}sh -c{{ end }}'
    cmds:
      - cmd: >-
          {{.RUN}} "{{ fromSlash .VCPKG_BOOTSTRAP }}"
          -disableMetrics
      - cmd: >-
          "{{ fromSlash .VCPKG_EXE }}"
          install {{.VCPKG_DEFAULT_ARGS}}
          --only-downloads
      - cmd: >-
          "{{ fromSlash .VCPKG_EXE }}"
          install {{.VCPKG_DEFAULT_ARGS}}

  cmake-build:
    cmds:
      - cmd: git submodule update --init --recursive --checkout
      - task: vcpkg-install
      - cmd: >-
          cmake --preset "{{ .CMAKE_PRESET }}"
          {{ .CMAKE_SET_LOG_LEVEL }}
      - cmd: cmake --build --preset "{{ .CMAKE_PRESET }}" --trace

  build:
    vars:
      BUILDSPEC_EXE: '{{ joinPath .ROOT_DIR "tools" "buildspec.js" }}'
      BUILDSPEC: '{{ joinPath .ROOT_DIR "buildspec.json" }}'
      BUILDSPEC_JSON_DATA:
        sh: '{{.CAT}} "{{ .BUILDSPEC }}"'
      BUILDSPEC_JSON:
        ref: "fromJson .BUILDSPEC_JSON_DATA"
      DEPENDENCIES:
        ref: ".BUILDSPEC_JSON.dependencies"

      OBS_DEPS:
        sh: >-
          if _output="$( \
            node \
              "{{ fromSlash .BUILDSPEC_EXE }}" \
              "{{ fromSlash .BUILDSPEC }}" \
              "prebuilt" "windows-x64" )"; then
            echo "$_output"
          else
            echo "XX"
            echo "YY"
            echo "ZZ"
          fi
      OBS_DATE: '{{ index (splitLines .OBS_DEPS) 0 }}'
      OBS_BUILD_HASH: '{{ index (splitLines .OBS_DEPS) 1 }}'
      OBS_DEPS_URL: '{{ index (splitLines .OBS_DEPS) 2 }}'

      QT_DEPS:
        sh: >-
          if _output="$( \
            node \
              "{{ fromSlash .BUILDSPEC_EXE }}" \
              "{{ fromSlash .BUILDSPEC }}" \
              "qt{{ .QT | default "6" }}" \
              "windows-x64" )"; then
            echo "$_output"
          else
            echo "XX"
            echo "YY"
            echo "ZZ"
          fi
      QT_DATE: '{{ index (splitLines .QT_DEPS) 0 }}'
      QT_BUILD_HASH: '{{ index (splitLines .QT_DEPS) 1 }}'
      QT_URL: '{{ index (splitLines .QT_DEPS) 2 }}'

      OBS_VERSION:
        sh: git -C "{{ joinPath .ROOT_DIR "third-party" "obs-studio" }}" describe --tags --long

      PRINT:
        sh: |
          echo "obs_deps_version={{.OBS_DATE}}"
          echo "obs_deps_hash={{.OBS_BUILD_HASH}}"
          echo "obs_deps_url={{.OBS_DEPS_URL}}"
          echo "qt_version={{.QT_DATE}}"
          echo "qt_hash={{.QT_BUILD_HASH}}"
          echo "qt_url={{.QT_URL}}"
          echo "obs_version={{.OBS_VERSION}}"
    cmds:
      - cmd: |
          if [ -n "${GITHUB_ENV:-}" ]; then
            echo "{{.PRINT}}" >> "$GITHUB_ENV"
          fi
          echo "{{.PRINT}}"
      - task: dependency-qt
        vars: { QT_URL: { ref: '.QT_URL' } }
      - task: dependency-prebuilt
        vars: { OBS_DEPS_URL: { ref: '.OBS_DEPS_URL' } }
      - task: dependency-obs-libraries-apply-patches
      - task: dependency-obs-libraries
      #- task: dependency-configure
      #- task: build-debug
      #- task: build-release

  dependency-qt:
    status:
      - test -f "{{ joinPath .TEMP_DIR "qt.zip" }}"
    cmds:
      - cmd: |
          {{.MKDIR}} "{{fromSlash .TEMP_DIR}}" || true
          curl --retry 5 --retry-delay 30 -jLo "{{ joinPath .TEMP_DIR "qt.zip" }}" "{{ .QT_URL }}"
          {{.MKDIR}} {{ joinPath .BUILD "qt" | fromSlash }} || true
          7z x -y -o"{{ joinPath .BUILD "qt" | fromSlash }}" -- "{{ joinPath .TEMP_DIR "qt.zip" }}"

  dependency-prebuilt:
    status:
      - test -f "{{ joinPath .TEMP_DIR "obsdeps.zip" }}"
    cmds:
      - cmd: |
          {{.MKDIR}} "{{fromSlash .TEMP_DIR}}" || true
          curl --retry 5 --retry-delay 30 -jLo "{{ joinPath .TEMP_DIR "obsdeps.zip" }}" "{{ .OBS_DEPS_URL }}"
          if [[ ! -f "{{ joinPath .BUILD "obsdeps" | fromSlash }}" ]]; then
            {{ .MKDIR }} {{ joinPath .BUILD "obsdeps" | fromSlash }}
          fi
          7z x -y -o"{{ joinPath .BUILD "obsdeps" | fromSlash }}" -- "{{ joinPath .TEMP_DIR "obsdeps.zip" }}"

  dependency-obs-libraries-apply-patches:
    sources:
      - patches/obs-studio/*.patch
    cmds:
      - for: sources
        cmd: |
          git -C "{{ joinPath .ROOT_DIR "third-party" "obs-studio" }}" apply "{{ joinPath .ROOT_DIR .ITEM | fromSlash }}"

  dependency-obs-libraries:
    env:
      # obs-studio does not support ClangCL
      CMAKE_GENERATOR_TOOLSET: ""
    cmds:
      - cmd: |
          {{.RUN}} {{.MKDIR}} "{{fromSlash .TEMP_DIR}}" || true
      - cmd: >-
          cmake
          -S "{{ joinPath .ROOT_DIR "third-party" "obs-studio" }}"
          -B "{{ joinPath .BUILD "obs" }}"
          -DCMAKE_SYSTEM_VERSION="{{ .CMAKE_SYSTEM_VERSION }}"
          -DCMAKE_INSTALL_PREFIX="{{ joinPath .ROOT_DIR "build/obs/install" }}"
          -DCMAKE_PREFIX_PATH="{{ joinPath .ROOT_DIR "build/obsdeps" }};{{ joinPath .ROOT_DIR "build/qt" }}"
          -DENABLE_PLUGINS=OFF
          -DENABLE_UI=OFF
          -DENABLE_SCRIPTING=OFF

      - cmd: >-
          cmake
          --build "{{ joinPath .BUILD "obs" | fromSlash }}"
          --config RelWithDebInfo
          --target obs-frontend-api

      - cmd: >-
          cmake
          --install "{{ joinPath .BUILD "obs" | fromSlash }}"
          --config RelWithDebInfo
          --component obs_libraries

  configure:
    cmds:
      - cmd: >-
          cmake \
          -S "{{ .ROOT_DIR }}"
          -B "{{ joinPath .BUILD "ci" | fromSlash }}"
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
          -Dlibobs_DIR="{{ joinPath .ROOT_DIR "build/obs/install" }}"
          -DQt${{ matrix.qt }}_DIR={{ joinPath .BUILD "qt" | fromSlash }}
          -DFFmpeg_DIR={{ joinPath .BUILD "obsdeps" | fromSlash }}
          -DCURL_DIR={{ joinPath .BUILD "obsdeps" | fromSlash }}

  build-debug:
    env:
      CMAKE_BUILD_TYPE: "Debug"
    cmds:
      - cmd: |
          cmake --build "build/ci" --config "{{ .CMAKE_BUILD_TYPE }}" --target StreamFX

  build-release:
    env:
      CMAKE_BUILD_TYPE: "RelWithDebInfo"
    cmds:
      - cmd: |
          cmake --build "build/ci" --config "{{ .CMAKE_BUILD_TYPE }}" --target StreamFX

  _detach:
    requires:
      vars: [TARGET, GIT_PREFIX]
    vars:
      GIT: git -C {{.TARGET}}
    preconditions:
      - test -f "{{.TARGET}}/buildspec.json"
    cmds:
      - cmd: "{{.GIT}} reset -- .gitmodules"
        ignore_error: true
      - cmd: "{{.GIT}} submodule deinit {{.GIT_PREFIX}}"
        ignore_error: true
      - cmd: '{{.GIT}} config -f .gitmodules --remove-section "submodule.{{.GIT_PREFIX}}"'
        ignore_error: true
      - cmd: "{{.GIT}} submodule update --init --recursive"
        ignore_error: true
      - cmd: "{{.GIT}} rm --cached --force {{.GIT_PREFIX}}"
        ignore_error: true

  # https://github.com/Xaymar/obs-StreamFX/blob/root/BUILDING.md
  detach:
    vars:
      TARGET: "{{.CLI_ARGS}}"
      GIT_PREFIX: "build-aux/config"
    env:
      TARGET_TEST: "{{.TARGET}}/buildspec.json"
    preconditions:
      - test -f "$TARGET_TEST"
    cmds:
      - task: _detach
        vars:
          TARGET: "{{ .TARGET }}"
          GIT_PREFIX: "{{ .GIT_PREFIX }}"

  # https://github.com/Xaymar/obs-StreamFX/blob/root/BUILDING.md
  attach:
    vars:
      TARGET: "{{.CLI_ARGS}}"
      BRANCH: develop
      GIT_URL: https://github.com/joelvaneenwyk/obs-studio-config.git
      GIT_PREFIX: build-aux/config
    preconditions:
      - test -d {{.TARGET}}
    generates:
      - "{{.TARGET}}/build-aux/config"
    cmds:
      - task: _detach
        vars:
          TARGET: "{{ .TARGET }}"
          GIT_PREFIX: "{{ .GIT_PREFIX }}"
      - cmd: git -C {{.TARGET}} submodule add --branch develop -- {{.GIT_URL}} {{.GIT_PREFIX}}
        ignore_error: true
